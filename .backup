func (m *Migrator) MigratePod(ctx context.Context, namespace string, podName string, appLabel string, targetNode string) error {
	logger := klog.FromContext(ctx)
	logger.V(1).Info("开始迁移Pod", "podName", podName, "targetNode", targetNode)
	// Get all nodes
	nodes, err := m.clientset.CoreV1().Nodes().List(ctx, metav1.ListOptions{})
	if err != nil {
		return fmt.Errorf("failed to get node list: %v", err)
	}
	// Get all pods of the same deployment
	pods, err := m.clientset.CoreV1().Pods(namespace).List(ctx, metav1.ListOptions{
		LabelSelector: appLabel,
	})
	if err != nil {
		return fmt.Errorf("failed to get Pod list: %v", err)
	}
	podMap := make(map[string]corev1.Pod)

	// Check if the target pod is in the list
	for _, pod := range pods.Items {
		podMap[pod.Name] = pod
	}
	if _, ok := podMap[podName]; !ok {
		return fmt.Errorf("target Pod does not exist: %s", podName)
	}
	logger.V(2).Info("开始设置节点为不可调度", "targetNode", targetNode)
	// Iterate through all nodes, cordon all except the target node
	for _, node := range nodes.Items {
		if node.Name != targetNode {
			node.Spec.Unschedulable = true
			_, err := m.clientset.CoreV1().Nodes().Update(ctx, &node, metav1.UpdateOptions{})
			if err != nil {
				logger.Error(err, "failed to set node as unschedulable", "node", node.Name)
			} else {
				logger.V(2).Info("successfully set node as unschedulable", "node", node.Name)
			}
		}
	}
	logger.V(2).Info("开始驱逐Pod", "podName", podName)
	// Evict the current pod
	err = m.clientset.CoreV1().Pods(namespace).Evict(ctx, &v1beta1.Eviction{
		ObjectMeta: metav1.ObjectMeta{
			Name:      podName,
			Namespace: namespace,
		},
	})

	if err != nil {
		return fmt.Errorf("failed to evict Pod: %v", err)
	}
	// Get the status of the new pod and wait for it to initialize successfully
	for {
		pods, err := m.clientset.CoreV1().Pods(namespace).List(ctx, metav1.ListOptions{
			LabelSelector: appLabel,
		})
		if err != nil {
			return fmt.Errorf("failed to get Pod list: %v", err)
		}

		// The new node hasn't appeared in the previous map
		var newPod *corev1.Pod
		for _, pod := range pods.Items {
			if _, ok := podMap[pod.Name]; !ok && pod.Status.Phase == corev1.PodRunning {
				newPod = &pod
				break
			}
		}
		if newPod == nil {
			logger.V(2).Info("new Pod is not ready yet, waiting...")
			time.Sleep(3 * time.Second)
			continue
		} else {
			logger.V(1).Info("new Pod has been successfully initialized", "podName", newPod.Name)
			break
		}
	}

	// Restore all nodes to schedulable state
	logger.V(1).Info("开始恢复节点为可调度", "targetNode", targetNode)
	nodes, err = m.clientset.CoreV1().Nodes().List(ctx, metav1.ListOptions{})
	if err != nil {
		return fmt.Errorf("failed to get node list: %v", err)
	}
	for _, node := range nodes.Items {
		if node.Spec.Unschedulable {
			logger.V(2).Info("restoring node to schedulable state", "node", node.Name)
			node.Spec.Unschedulable = false
			_, err := m.clientset.CoreV1().Nodes().Update(ctx, &node, metav1.UpdateOptions{})
			if err != nil {
				return fmt.Errorf("failed to restore node to schedulable state: %v", err)
			} else {
				logger.V(2).Info("successfully restored node to schedulable state", "node", node.Name)
			}
		}
	}
	return nil
}